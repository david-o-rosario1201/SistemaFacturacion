@page "/EditProductos"
@page "/EditProductos/productoId={productoId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProductosService productosService

<PageTitle>Modificar Producto</PageTitle>
<EditForm Model="producto" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header">
				<h3 class="text-center"><strong>Modificar Producto</strong></h3>
			</div>
			@*Body*@
			<div class="card-body">
				@*Fila #1*@
				<div class="row mb-3">
					<div class="col-2">
						@*Producto Id*@
						<label class="form-label" for="empleadoId"><strong>ProductoId:</strong></label>
						<InputNumber id="empleadoId" class="form-control" @bind-Value="producto.ProductoId" readonly></InputNumber>
					</div>
					<div class="col-4">
						@*Nombre*@
						<label class="form-label" for="nombre"><strong>Nombre:</strong></label>
						<InputText id="nombre" class="form-control" @bind-Value="producto.Nombre" placeholder="Ej: Jugo de Naranja"></InputText>
						<ValidationMessage For="@(() => producto.Nombre)"></ValidationMessage>
					</div>
					<div class="col-6">
						@*Descripcion*@
						<label class="form-label" for="descripcion"><strong>Descripci&oacute;n:</strong></label>
						<InputText id="descripcion" class="form-control" @bind-Value="producto.Descripcion" placeholder="Ej: Jugo %100 de naranja"></InputText>
						<ValidationMessage For="@(() => producto.Descripcion)"></ValidationMessage>
					</div>
				</div>
				@*Fila #2*@
				<div class="row mb-3">
					<div class="col-3">
						@*Costo*@
						<label class="form-label" for="costo"><strong>Costo:</strong></label>
						<InputNumber id="costo" class="form-control" @bind-Value="producto.Costo" @onblur="CalcularPrecioVenta"></InputNumber>
						<ValidationMessage For="@(() => producto.Costo)"></ValidationMessage>
					</div>
					<div class="col-3">
						@*Cantidad*@
						<label class="form-label" for="cantidad"><strong>Cantidad:</strong></label>
						<InputNumber id="cantidad" class="form-control" @bind-Value="producto.Cantidad"></InputNumber>
						<ValidationMessage For="@(() => producto.Cantidad)"></ValidationMessage>
					</div>
					<div class="col-3">
						@*Porcentaje*@
						<label class="form-label" for="ganancia"><strong>Porcentaje de Ganancia:</strong></label>
						<InputNumber id="ganancia" class="form-control" @bind-Value="producto.PorcentajeGanancia" @onblur="CalcularPrecioVenta"></InputNumber>
						<ValidationMessage For="@(() => producto.PorcentajeGanancia)"></ValidationMessage>
					</div>
					<div class="col-3">
						@*Precio*@
						<label class="form-label" for="venta"><strong>Precio de Venta:</strong></label>
						<InputNumber id="venta" class="form-control" @bind-Value="producto.PrecioVenta" readonly></InputNumber>
						<ValidationMessage For="@(() => producto.PrecioVenta)"></ValidationMessage>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Modificar</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int productoId { get; set; }
	public Productos producto { get; set; } = new Productos();

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		producto = await productosService.Buscar(productoId);
	}

	public async void Modificar()
	{
		if (await Validar())
			return;
		else
		{
			var crear = await productosService.Crear(producto);
			if (crear)
			{
				//mensaje = "El cliente se ha creado con exito";
				await Task.Delay(1000);
				Volver();
			}
		}

		StateHasChanged();
		await Task.Delay(2000);
	}

	public async Task<bool> Validar()
	{
		// var valor = await productosService.Listar(e => e.ProductoId > 0);

		// if (cedula != null)
		// 	return true;

		// if (telefono != null)
		// 	return true;

		return false;
	}

	public void CalcularPrecioVenta()
	{
		var porciento = (producto.PorcentajeGanancia * producto.Costo) / 100;
		producto.PrecioVenta = producto.Costo + porciento;
	}

	void Volver()
	{
		navigation.NavigateTo("/Productos");
	}
}