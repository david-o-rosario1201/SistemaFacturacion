@page "/ViewProductos"
@page "/ViewProductos/productoId={productoId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ProductosService productosService

<PageTitle>Detalles del Producto</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3 class="text-center"><strong>Detalles del Producto</strong></h3>
		</div>
		@*Body*@
		<div class="card-body">
			@*Datos*@
			<ul>
				<li><strong>ProductoId:</strong> @producto.ProductoId</li>
				<li><strong>Nombre:</strong> @producto.Nombre</li>
				<li><strong>Descripci&oacute;n:</strong> @producto.Descripcion</li>
				<li><strong>Costo:</strong> @producto.Costo.ToString("N2")</li>
				<li><strong>Cantidad:</strong> @producto.Cantidad unid.</li>
				<li><strong>Porcentaje de Ganancia:</strong> @producto.PorcentajeGanancia%</li>
				<li><strong>Precio de Venta:</strong> @producto.PrecioVenta.ToString("N2")</li>
			</ul>
		</div>
		@*Footer*@
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
				<button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public int productoId { get; set; }
	public Productos producto { get; set; } = new Productos();

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		producto = await productosService.Buscar(productoId);
	}

	void Volver()
	{
		navigation.NavigateTo("/Productos");
	}
}